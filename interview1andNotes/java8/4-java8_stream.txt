general point
note :

 ---------------  1----------------------------------
public  interface Consumer<T>{
 void accept<T>
 
 public interface Predicate<T>{
  boolean test(T t)
 }
 
 public interface Function<T,R>{
 
 R apply(T t)
 }
 
forEach will accept consumer as argument
filter will accept predicate as argument
map will accept function as argument
findFirst take optional object
 
 Collectors.summingInt (Integer::value)
Collectors.averagingInt(Integer::value)
Collectors.minBy(Comparator.naturalOrder)
Collectors.maxBy(Comparator.naturalOrder)
Collectors.counting
Colllectors.groupingBy--------------------take function   and return map
Collectors.groupingBy(Person::getAge,Collectors.counting)


---------------------------------------2 ------------------------------------------

									print stream

			// create a stream from string
		Stream<String> stream = Stream.of("a", "b", "c");
		stream.forEach(System.out::println);

		Stream<Integer> stream1 = Stream.of(1, 2, 3);
		stream1.forEach(System.out::println);

		// create stream from list
		List<String> list = Arrays.asList("city", "town");
		Stream<String> stream2 = list.stream();

		stream2.forEach(System.out::println);

		// create stream from set

		Set<String> set = new HashSet<>(list);
		Stream<String> stream3= set.stream();
		stream3.forEach(System.out::println);

		// create stream from array
		String[] str = { "name", "city", "age" };
		Stream<String> stream4 = Arrays.stream(str);
		stream4.forEach(System.out::println);
		
------------------------------------3-----------------------------------------------

sorting using java 8

1- three different way to sort list in ascending order


                          sort list of string in ascending order

List<String> fruit= Arrays.asList("Banana","Apple","Mango","Orange");
		
		//ascending order
		
		List<String> sortedList = fruit.stream().sorted(Comparator.naturalOrder()).collect(Collectors.toList());
		System.out.println(sortedList);
		
		// using lambda expression
		List<String> sortedList1 = fruit.stream().sorted((o1,o2)->o1.compareTo(o2)).collect(Collectors.toList());
		System.out.println(sortedList1);
		
		// using lambda expression
		List<String> sortedList2 = fruit.stream().sorted().collect(Collectors.toList());
		System.out.println(sortedList2);
		
        sort list of string in descending order

 
		List<String> fruit= Arrays.asList("Banana","Apple","Mango","Orange");
		
		//ascending order
		
		List<String> sortedList = fruit.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
		System.out.println(sortedList);
		
		// using lambda expression
		List<String> sortedList1 = fruit.stream().sorted((o1,o2)->o2.compareTo(o1)).collect(Collectors.toList());
		System.out.println(sortedList1);
		

---------------------------------------4-----------------------------------------

findFirst  and findAny ---- of string	

	public static void main(String[] args) {

		List<Integer> list = Arrays.asList(1, 2, 3, 4);
		Optional<Integer> first = list.stream().findFirst();

		if (first.isPresent()) {
			System.out.println(first.get());
		}else {
			System.out.println("not present");
		}

	}	
		
		
=======================================================5--------------------------------------------

count() , min() and max() method

Count () : use to count number of element in string
Max() -> use to find max element in string
Min():- use to find min element in a string


public class demo {

	public static void main(String[] args) {

		// min

		Stream<Integer> stream = Stream.of(1, 2, 3, 4, 5, 6, 7);
		Integer min = stream.min(Comparator.comparing(Integer::valueOf)).get();

		// max

		Stream<Integer> stream1 = Stream.of(1, 2, 3, 4, 5, 6, 7, 8);
		Integer max = stream1.max(Comparator.comparing(Integer::valueOf)).get();
		
		Stream<Integer> stream2 = Stream.of(1, 2, 3, 4, 5, 6, 7, 8);
		long count = stream2.count();

	
		
		System.out.println(min);
		System.out.println(max);
		System.out.println(count);

	}
}

// output
1
8
8

===========================================6-----------------------
forEach() --------------------- print map

public static void main(String[] args) {

		Map<Integer, String> m = new HashMap<>();
		m.put(1, "saurabh");

		m.forEach((k, v) -> System.out.println(k + " " + v));

	}
	
============================================7-----------------==========================

collectors.joining return string -------------------------convert element into string

	List<String> asList = Arrays.asList("hello", "saurabh");
		String collect = asList.stream().collect(Collectors.joining(","));
		System.out.println(collect);
		
		// output
		hello,saurabh
		
==============================================8--------------====================

java 8 stream flatMap method
 Question :  when we should go for map and when we should go for flatMap.
We should go for map if we have given a list, set or map of element.
But if we have given list of list, set of set or map of map then we should go for flatMap

		
		List<List<Integer>> numList = Arrays.asList(

				Arrays.asList(1, 2, 3),
				Arrays.asList(4, 5, 6));
		
		List<Integer> collect = numList.stream().flatMap(List::stream).collect(Collectors.toList());
		
		collect.forEach(System.out::println);
		
		// output 1 2 3 4 5 6
		
==========================================9---------======================================

distinct :--- will give unique values

	List<Integer> asList = Arrays.asList(1, 2, 2, 3, 4);

		List<Integer> collect = asList.stream().distinct().collect(Collectors.toList());

		collect.forEach(System.out::println);
		
===============================================10-----------=======================

12 : stream reduce method
Reduce : 
we use this  method when we have to reduce to certain value
example :-----sum of all number , multiply of all number
do a certain operation on all values and reduce to single values.

List<Integer> asList = Arrays.asList(1, 2, 2, 3, 4);

		Integer reduce = asList.stream().reduce(0,(a,b)->a+b);
		
		System.out.println(reduce);
		
		// output 12
		
===========================================11------------===============

13 ) allMatch() , anyMatch(), noneMatch()
Note :
These method will take a predicate


=============================================12-----------------==========

Collectors.summingInt (Integer::value)
Collectors.averagingInt(Integer::value)
Collectors.minBy(Comparator.naturalOrder)
Collectors.maxBy(Comparator.naturalOrder)
Collectors.counting
Colllectors.groupingBy--------------------take function   and return map
Collectors.groupingBy(Person::getAge,Collectors.counting)

List<Integer> asList = Arrays.asList(1, 2, 2, 3, 4);
Map<Integer, List<Integer>> collect = asList.stream().collect(Collectors.groupingBy(Integer::intValue));
System.out.println(collect);

========================================12---------------=====

partitioningBy method  --  it takes predicate
Note : partitioningBy create partition based on our logic
Will take list of integer and will create even and odd partition
It return a map and key is always a boolean

================================14-------------======

IntStrream deal with number

intStream.of(numbers).sum();
intStream.of(numbers).max();
intStream.of(numbers).min();

list.stream().mapToInt(Integer::intValue).min

IntStream.of(number).mapToObject===============



----------------13 duplicate value==================

List<Integer> asList = Arrays.asList(1, 2, 2, 3, 4);

		Map<Integer, Long> frequencyMap = asList.stream()
				.collect(Collectors.groupingBy(Integer::intValue, Collectors.counting()));

		Map<Integer, Long> collect = frequencyMap.entrySet().stream().filter(entry -> entry.getValue() > 1)
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
		collect.forEach((x, y) -> System.out.println(x + " " + y));
		
		2 2
===============================

-----------------------13 find second largest=================================

	List<Integer> asList = Arrays.asList(1, 2, 2, 3, 4);

		Integer integer = asList.stream().distinct().sorted(Comparator.reverseOrder()).skip(1).findFirst().get();

================================================================

------------------14     duplicate character----------------------------------------

String name = "saurabh";

		Map<Character, Long> frequencyMap = name.chars().mapToObj(val -> (char) val)
				.collect(Collectors.groupingBy(val -> val, Collectors.counting()));

		 List<Character> collect = frequencyMap.entrySet().stream().filter(entry -> entry.getValue() > 1)
				.map(Map.Entry::getKey).collect(Collectors.toList());
		System.out.println(collect);
============================================================================	

List<Integer> asList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8);

		// 15----------- separate odd and even
		Map<Boolean, List<Integer>> collect = asList.stream().collect(Collectors.partitioningBy(val -> val % 2 == 0));
		System.out.println(collect.get(true));
		System.out.println(collect.get(false));
		System.out.println("============");

		// 16-----------------remove duplicate from list
		List<Integer> asList1 = Arrays.asList(1, 2, 3, 3, 5, 6, 7, 8);
		asList.stream().distinct().collect(Collectors.toList()).forEach(System.out::println);
		System.out.println("============");

		// 17---------- frequency of each character in string
		String name = "saurabh";
		Map<Character, Long> collect2 = name.chars().mapToObj(val -> (char) val)
				.collect(Collectors.groupingBy(x -> x, Collectors.counting()));
		System.out.println(collect2);
		System.out.println("============");

		// 18------------ frequency of each element in an array
		int[] arr = { 1, 2, 3, 1, 2, 3 };
		Map<Integer, Long> collect3 = Arrays.stream(arr).mapToObj(val -> val)
				.collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
		System.out.println(collect3);
		System.out.println("============");

		// 19----------sort the list in reverse order
		List<Integer> list = Arrays.asList(1, 2, 3);
		list.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);
		System.out.println("============");

		// 20---------print multiple of 5 from the list
		List<Integer> list1 = Arrays.asList(1, 2, 3, 5, 10);
		list1.stream().filter(num -> num % 5 == 0).forEach(System.out::println);
		System.out.println("============");

		// 21-----------maximum and minimum in a list
		List<Integer> list3 = Arrays.asList(1, 2, 3, 5, 10);

		Integer max = list3.stream().max(Comparator.naturalOrder()).get();
		System.out.println("max value in list " + max);

		List<Integer> list4 = Arrays.asList(1, 2, 3, 5, 10);
		Integer min = list3.stream().min(Comparator.naturalOrder()).get();
		System.out.println("min value in list " + min);

		List<Integer> list5 = Arrays.asList(2, 3, 5, 10);
		Optional<Integer> min1 = list5.stream().collect(Collectors.minBy(Comparator.naturalOrder()));
		System.out.println("min " + min1.get());
		System.out.println("============");

		// 22----------anagram program in java 8
		// split , uppercase, sorted, joining

		String str1 = "face";
		String str2 = "caef";

		String collect4 = Stream.of(str1.split("")).map(String::toUpperCase).sorted().collect(Collectors.joining());
		String collect5 = Stream.of(str2.split("")).map(String::toUpperCase).sorted().collect(Collectors.joining());

		if (collect4.equals(collect5)) {
			System.out.println("anagram");
		}
		System.out.println("============");

		// 23-----------sum of all digit of a number

		int number = 12345;

		Integer collect6 = Stream.of(String.valueOf(number).split(""))
				.collect(Collectors.summingInt(Integer::parseInt));
		System.out.println("sum of digit in a number " + collect6);

		System.out.println("============");

		// 24---- find three max and min from list
		List<Integer> min3 = Arrays.asList(1, 4, 5, 6, 2, 7);

		min3.stream().sorted().limit(3).forEach(System.out::println);

		List<Integer> max3 = Arrays.asList(1, 4, 5, 6, 2, 7);
		max3.stream().sorted(Comparator.reverseOrder()).limit(3).forEach(System.out::println);

		System.out.println("============");

		// 25- second largest number in integer array

		List<Integer> list2 = Arrays.asList(1, 3, 4, 2, 6);
		Integer integer = list2.stream().sorted(Comparator.reverseOrder()).skip(1).findFirst().get();
		System.out.println("second max " + integer);
		System.out.println("============");
		
		// 26 sort list of string in increasing order of their length

		List<String> list6 = Arrays.asList("saurabh", "ankit", "rupesh");
		
		//common element 
		list6.stream().sorted(Comparator.comparing(String::length)).forEach(System.out::println);
		
		// 27---- reverse array
		int[] arr = { 1, 4, 5, 2, 7, 8 };
		Arrays.stream(arr).mapToObj(Integer::valueOf).sorted(Comparator.reverseOrder())
				.forEach(num -> System.out.print(num + " "));
		System.out.println();
		
		// convert array into list
		// .boxed() converts each int element into its boxed Integer representation.

		List<Integer> collect = Arrays.stream(arr).boxed().sorted(Comparator.reverseOrder())
				.collect(Collectors.toList());

		System.out.println(collect);
		
		28----reverse string
		
		public class TestNew {

	public static void main(String[] args) {

		String name = "saurabh";

		String reversed2 = name.chars().mapToObj(c -> String.valueOf((char) c)).reduce("", (acc, c) -> c + acc);

		System.out.println(reversed2);
	}

}
	}
}

-------------------------29      second max : in array using java 8

	int[] arr1 = { 1, 5, 3, 7 };

	int secondMax = Arrays.stream(arr1).distinct().sorted().skip(arr1.length - 2).findFirst().getAsInt();
	System.out.println(secondMax);
	
	30 :--- flatten array of object
public class Demo {

	public static void main(String[] args) {
		Object[] array = { 1, 2, new Object[] { 3, 4, new Object[] { 5 }, 6, 7 }, 8, 9, 10 };

		List<Object> flattenArray = flattenArray(array);

		System.out.println(flattenArray);
	}

	private static List<Object> flattenArray(Object[] array) {

		return Arrays.stream(array)
				.flatMap(o -> o instanceof Object[] ? flattenArray((Object[]) o).stream() : Arrays.asList(o).stream())
				.collect(Collectors.toList());

	}
}
========================================31 sort by values================
using java 8

package com;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class TestNew {
	public static void main(String[] args) {

		Map<String, String> map = new HashMap<>();
		map.put("Apple", "a");
		map.put("Banana", "A");
		map.put("Orange", "d");
		map.put("pineapple", "B");

		System.out.println("sort in ascending order by value");
		LinkedHashMap<String, String> collect = map.entrySet().stream().sorted(Map.Entry.comparingByValue())
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e2, LinkedHashMap::new));
		collect.forEach((key, value) -> System.out.println(key + " " + value));
		
											or
		 LinkedHashMap<String, String> map2 = map.entrySet().stream()
		 .sorted((e1,e2)->e1.getValue().compareTo(e2.getValue()))
		 .collect(Collectors.toMap(entry->entry.getKey(),entry->entry.getValue(),(e1, e2) -> e1,()->new LinkedHashMap<>()));
	
		map2.forEach((k,v)->System.out.println(k+" "+ v));
		

		System.out.println("sort in descending order by value");
		LinkedHashMap<String, String> des = map.entrySet().stream()
				.sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e2, LinkedHashMap::new));
		des.forEach((key, value) -> System.out.println(key + " " + value));
	}
}
//.sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))

32- reverse a sentence :-
public class TestNew {
	public static void main(String[] args) {

		String sentence = "Hello*world?this#is*a?test%of@wildcards!";

		// Replace all non-alphanumeric characters with a space
		String replacedSentence = sentence.replaceAll("[^a-zA-Z]"," ");

		System.out.println("Original sentence: " + sentence);
		System.out.println("Replaced sentence: " + replacedSentence);
		
		 List<String> words = Arrays.asList(replacedSentence.split(" "));
		 Collections.reverse(words);
		 String collect = words.stream().collect(Collectors.joining(" "));
		 System.out.println(collect);
		 
	}
}

------------------------------33 flattening list-----------------------------

	List<List<Integer>> list = Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 5), Arrays.asList(6, 7, 8));

		List<Integer> collect = list.stream().flatMap(l -> l.stream()).collect(Collectors.toList());

		System.out.println(collect);
		
		
		34 :---- count number of each word in a  list

List<String> list = Arrays.asList(" this,::, is a boy", "how are you", "this is a boy");

		Map<String, Long> collect = list.stream().flatMap(word -> Arrays.stream(word.split("\\s+")))
				.map(word -> word.replaceAll("[^a-zA-z]", ""))
				.filter(word->!word.isEmpty())
				.collect(Collectors.groupingBy(x -> x, Collectors.counting()));

		System.out.println(collect);


List<String> words = list.stream()
                         .flatMap(s -> Arrays.stream(s.trim().split("\\s+")))
                         .collect(Collectors.toList());
words.forEach(System.out::println);

		
-------------------------------------35 emp related question------------------------		
		
package com;

public class Employee
{
    int id;
     
    String name;
     
    int age;
     
    String gender;
     
    String department;
     
    int yearOfJoining;
     
    double salary;
     
    public Employee(int id, String name, int age, String gender, String department, int yearOfJoining, double salary) 
    {
        this.id = id;
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.department = department;
        this.yearOfJoining = yearOfJoining;
        this.salary = salary;
    }
     
         
    @Override
    public String toString() 
    {
        return "Id : "+id
                +", Name : "+name
                +", age : "+age
                +", Gender : "+gender
                +", Department : "+department
                +", Year Of Joining : "+yearOfJoining
                +", Salary : "+salary;
    }
}


public class Java8Demo {

	private static List<Employee> employeeData() {
		List<Employee> employeeList = new ArrayList<Employee>();

		employeeList.add(new Employee(111, "Jiya Brein", 32, "Female", "HR", 2011, 25000.0));
		employeeList.add(new Employee(122, "Paul Niksui", 25, "Male", "Sales And Marketing", 2015, 13500.0));
		employeeList.add(new Employee(133, "Martin Theron", 29, "Male", "Infrastructure", 2012, 18000.0));
		employeeList.add(new Employee(144, "Murali Gowda", 28, "Male", "Product Development", 2014, 32500.0));
		employeeList.add(new Employee(155, "Nima Roy", 27, "Female", "HR", 2013, 22700.0));
		employeeList.add(new Employee(166, "Iqbal Hussain", 43, "Male", "Security And Transport", 2016, 10500.0));
		employeeList.add(new Employee(177, "Manu Sharma", 35, "Male", "Account And Finance", 2010, 27000.0));
		employeeList.add(new Employee(188, "Wang Liu", 31, "Male", "Product Development", 2015, 34500.0));
		employeeList.add(new Employee(199, "Amelia Zoe", 24, "Female", "Sales And Marketing", 2016, 11500.0));
		employeeList.add(new Employee(200, "Jaden Dough", 38, "Male", "Security And Transport", 2015, 11000.5));
		employeeList.add(new Employee(211, "Jasna Kaur", 27, "Female", "Infrastructure", 2014, 15700.0));
		employeeList.add(new Employee(222, "Nitin Joshi", 25, "Male", "Product Development", 2016, 28200.0));
		employeeList.add(new Employee(233, "Jyothi Reddy", 27, "Female", "Account And Finance", 2013, 21300.0));
		employeeList.add(new Employee(244, "Nicolus Den", 24, "Male", "Sales And Marketing", 2017, 10700.5));
		employeeList.add(new Employee(255, "Ali Baig", 23, "Male", "Infrastructure", 2018, 12700.0));
		employeeList.add(new Employee(266, "Sanvi Pandey", 26, "Female", "Product Development", 2015, 28900.0));
		employeeList.add(new Employee(277, "Anuj Chettiar", 31, "Male", "Product Development", 2012, 35700.0));
		return employeeList;
	}

	public static void main(String[] args) {
		List<Employee> employeeList = employeeData();

		// Query 3.1 : How many male and female employees are there in the organization?

		employeeList.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.counting()))
				.forEach((x, y) -> System.out.println(x + " " + y));

		// Query 3.2 : Print the name of all departments in the organization?
		employeeList.stream().map(Employee::getDepartment).distinct().forEach(System.out::println);

		// Query 3.3 : What is the average age of male and female employees?

		Map<String, Double> avgAgeOfMaleAndFemaleEmployee = employeeList.stream()
				.collect(Collectors.groupingBy(Employee::getGender, Collectors.averagingInt(Employee::getAge)));
		System.out.println(avgAgeOfMaleAndFemaleEmployee);

		// Get the details of highest paid employee in the organization?

		Optional<Employee> collect = employeeList.stream()
				.collect(Collectors.maxBy(Comparator.comparingDouble(Employee::getSalary)));
		System.out.println(collect.get());

		// Get the names of all employees who have joined after 2015?

		employeeList.stream().filter(x -> x.yearOfJoining > 2015).map(Employee::getName).forEach(System.out::println);

		// Query 3.6 : Count the number of employees in each department?

		Map<String, Long> empInEachDepartment = employeeList.stream()
				.collect(Collectors.groupingBy(Employee::getDepartment, Collectors.counting()));
		System.out.println(empInEachDepartment);

		// Query 3.7 : What is the average salary of each department?

		Map<String, Double> avgSal = employeeList.stream().collect(
				Collectors.groupingBy(Employee::getDepartment, Collectors.averagingDouble(Employee::getSalary)));
		System.out.println(avgSal);

		// Query 3.8 : Get the details of youngest male employee in the product
		// development department?

		Optional<Employee> youngestEmp = employeeList.stream()
				.filter(x -> x.gender == "Male" && x.getDepartment() == "Product Development")
				.collect(Collectors.minBy(Comparator.comparingInt(Employee::getAge)));
		System.out.println(youngestEmp.get());

		// Query 3.9 : Who has the most working experience in the organization?

		Optional<Employee> seniorMostEmpl = employeeList.stream()
				.sorted(Comparator.comparingInt(Employee::getYearOfJoining)).findFirst();

		System.out.println(seniorMostEmpl.get());

		// Query 3.10 : How many male and female employees are there in the sales and
		// marketing team?

		Map<String, Long> countMaleFemaleEmployeesInSalesMarketing = employeeList.stream()
				.filter(x -> x.getDepartment() == "Sales And Marketing")
				.collect(Collectors.groupingBy(Employee::getGender, Collectors.counting()));
		System.out.println(countMaleFemaleEmployeesInSalesMarketing);

		// What is the average salary of male and female employees?

		Map<String, Double> avgSalMaleAndFemale = employeeList.stream()
				.collect(Collectors.groupingBy(Employee::getGender, Collectors.averagingDouble(Employee::getSalary)));
		System.out.println(avgSalMaleAndFemale);

		// Query 3.12 : List down the names of all employees in each department?

		Map<String, List<Employee>> allEmp = employeeList.stream()
				.collect(Collectors.groupingBy(Employee::getDepartment));

		allEmp.forEach((key, value) -> {

			System.out.println("Employees in " + key);

			System.out.println("------");
			value.forEach(x -> System.out.println(x.getName()));
		});

		// Query 3.14 : Separate the employees who are younger or equal to 25 years from
		// those employees who are older than 25 years.

		Map<Boolean, List<Employee>> empCategorize = employeeList.stream()
				.collect(Collectors.partitioningBy(emp -> emp.getAge() > 25));

		empCategorize.forEach((k, v) -> {

			if (k) {
				System.out.println("employees older than 25");
			} else {
				System.out.println("employees younger than or equal 25");
			}
			
			v.forEach(emp->System.out.println(emp.getName()));

		});
	}

}






			
		


============================================================================


		
					=========================================================================

		
		

========================================================================
