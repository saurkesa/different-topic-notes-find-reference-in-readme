
basic

1- fibonacci

public class Fibbonaci {

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int n = scn.nextInt();
		int a = 0;
		int b = 1;
		for (int i = 0; i < n; i++) {
			System.out.println(a);
			int c = a + b;

			a = b;
			b = c;
		}

	}

}

2- prime number

public class PrimeProgram {
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);

		// write ur code here
		int t = scn.nextInt();

		for (int i = 1; i <= t; i++) {
			int n = scn.nextInt();

			int count = 0;
			for (int div = 2; div * div <= n; div++) {
				if (n % div == 0) {
					count++;
				}
			}
			if (count == 0) {
				System.out.println("prime");
			} else {
				System.out.println("not prime");
			}
		}

	}
}

3- prime factor

import java.util.Scanner;

public class PrimeFactor {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int num = s1.nextInt();
// n1* n2 both number cant be greater than square root of n
		for (int div = 2; div*div < num; div++) {
			while (num % div == 0) {
				num = num / div;
				System.out.println(div);
			}

		}

		if (num != 1) {
			System.out.println(num);
		}

	}

}

4-  print all prime number

public class PrintAllPrimeNumber {

	public static void main(String[] args) {
		// write your code here
		Scanner scn = new Scanner(System.in);
		int low = scn.nextInt();
		int high = scn.nextInt();
		for (int i = low; i <= high; i++) {
			int count = 0;
			for (int div = 2; div * div <= i; div++) {
				if (i % div == 0) {
					count++;
					break;
				}
			}
			if (count == 0) {
				System.out.println(i);
			}
		}

	}

}

5-------------rotate number by k 

find total number of digit
find div and multiplier



import java.util.Scanner;

public class RotateNumber {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int k = s1.nextInt();
		int temp = n;
		int nod = 0;
		while (temp != 0) {
			temp = temp / 10;
			nod++;
		}

		k = k % nod;
		if (k < 0) {
			k = k + nod;
		}

		int div = 1;
		int mul = 1;
		for (int i = 1; i <= nod; i++) {
			if (i <= k) {
				div = div * 10;
			} else {
				mul = mul * 10;
			}
		}

		int quo = n / div;
		int rem = n % div;
		int r = mul * rem + quo;
		System.out.println(r);
	}

}

6 count  total number of digit 

  public class Main{
  
  public static void main(String[] args) {
  
  Scanner scn = new Scanner(System.in);
  int n = scn.nextInt();
  
  int digit = 0;
  while(n!=0){
      n = n/10;
      digit++;
  }
  
  System.out.println(digit);
  
   }
  }
  
 7 - display each digit
 
 public class CountDigit {
	public static void main(String[] args) {
		// write your code here
		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int temp = n;
		int nod = 0;
		while (temp != 0) {
			temp = temp / 10;
			nod++;
		}
		int div = (int) Math.pow(10, nod - 1);

		while (div != 0) {
			int q = n / div;
			System.out.println(q);
			n = n % div;
			div = div / 10;

		}
	}

}

8----- gcd and lcm

/* 
1. You are required to print the Greatest Common Divisor (GCD) of two numbers.
2. You are also required to print the Lowest Common Multiple (LCM) of the same numbers.
3. Take input "num1" and "num2" as the two numbers.
4. Print their GCD and LCM.
*/

public class gcd {

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		System.out.println("enter 2 number");
		int n1 = s.nextInt();
		int n2 = s.nextInt();
		int on1 = n1;
		int on2 = n2;
		int gcd;

		while (n1 % n2 != 0) {
			int rem = n1 % n2;
			n1 = n2;
			n2 = rem;

		}
		gcd = n2;
		int lcm = (on1 * on2) / gcd;
		System.out.println("gcd and lcm of 2 number are " + gcd + " " + lcm);

	}

}

9-- reverse number

public class ReverseNumber {
	public static void main(String[] args) {
		Scanner s1 = new Scanner(System.in);
		int number = s1.nextInt();
		while (number > 0) {
			int remainder = number % 10;
			System.out.println(remainder);
			number = number / 10;
		}
	}
}

10 : pattern use star and space concept

/* output
  
  *	*	*	*	*	
	*	*	*	*	
		*	*	*	
			*	*	
				*
 */
 
 public class Pattern4 {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);

		int n = s1.nextInt();
		int star = n;
		int space = 0;

		for (int i = 1; i <= n; i++) {
			for (int k = 1; k <= space; k++) {
				System.out.print("\t");
			}
			for (int j = 1; j <= star; j++) {
				System.out.print("*\t");
			}


			space++;
			star--;
			System.out.println();
		}

	}

}

11- pattern

/*
  
 	        *	
	*	*	*	
*	*	*	*	*	
	*	*	*	
		*	
 */
public class Pattern5 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int sp = n / 2;
		int st = 1;
		for (int i = 1; i <= n; i++) {

			for (int j = 1; j <= sp; j++) {
				System.out.print("\t");
			}
			for (int j = 1; j <= st; j++) {
				System.out.print("*\t");
			}
			if (i <= n / 2) {
				sp--;
				st = st + 2;
			} else {
				sp++;
				st = st - 2;
			}
			System.out.println();
		}
	}

}

12 pattern

* output
 
*	*	*		*	*	*	
*	*				*	*	
*						*	
*	*				*	*	
*	*	*		*	*	*
 */
public class Pattern6 {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int sp = 1;
		int st = n / 2 + 1;

		for (int i = 1; i <= n; i++) {
			
			for(int j=1;j<=st;j++)
			{
				System.out.print("*\t");
			}
			for(int j=1;j<=sp;j++)
			{
				System.out.print("\t");
			}
			for(int j=1;j<=st;j++)
			{
				System.out.print("*\t");
			}

			if (i <= n / 2) {
				sp += 2;
				st--;
			} else {
				sp -= 2;
				st++;
			}
			System.out.println();
		}

	}

}

13 pattern

import java.util.Scanner;
/*output
 			    *	
			*		
		*			
	*				
*					

 */

public class Pattern8 {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();

		int sp = n - 1;
		int st = 1;

		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= sp; j++) {
				System.out.print("\t");
			}
			for (int k = 1; k <= st; k++) {
				System.out.print("*\t");
			}
			sp--;
			System.out.println();
		}
		
}

14 pattern

public class Pattern9 {
	
	/* output
	 
*				*	
	*		*		
		*			
	*		*		
*				*	

	 
	 */

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();

		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				if (i == j || i + j == n + 1) {
					System.out.print("*\t");
				} else {
					System.out.print("\t");
				}
			}
			System.out.println();
		}

	}

}

15 pattern

import java.util.Scanner;
/*
1 
2 3 
4 5 6 
7 8 9 10 
11 12 13 14 15 
 */
public class Pattern11 {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int val = 1;

		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= i; j++) {
				System.out.print(val + " ");
				val++;
			}
			System.out.println();
		}

	}

}

16- pattern
/* output in fibonacci series
0	
1	1	
2	3	5	
8	13	21	34	
55	89	144	233	377	
 */
public class Pattern12 {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();

		int a = 0;
		int b = 1;
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= i; j++) {
				System.out.print(a + "\t");
				int c = a + b;
				a = b;
				b = c;
			}
			System.out.println();

		}

	}

}

17 didgit frquency

/*
 input 1234 1
output 1
 */
public class DigitFrequency {

	private static int getDigitFrequency(int n, int d) {

		int count = 0;
		while (n != 0) {
			int rem = n % 10;
			if (rem == d) {
				count++;
			}
			n = n / 10;
		}
		return count;

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int d = s1.nextInt();
		int f =getDigitFrequency(n, d);
		System.out.println(f);

	}

}

18---- span of an array ( max-min)

/*
 input 
 5
12
1
2
4
8

output 11
 */
public class Span_Of_Array {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();

		int[] arr = new int[n];

		for (int i = 0; i < arr.length; i++) {
			arr[i] = s1.nextInt();
		}

		int max = arr[0];
		int min = arr[0];
		for (int j = 1; j < arr.length; j++) {
			if (arr[j] > max) {

				max = arr[j];

			}
			if (arr[j] < min) {
				min = arr[j];
			}
		}

		int span = max - min;
		System.out.println(span);

	}

}

19: reverse of an array

public class ReverseAnArray {

	private static void reverse(int[] a) {

		int i = 0;
		int j = a.length - 1;

		while (i < j) {
			int temp = a[i];
			a[i] = a[j];
			a[j] = temp;
			i++;
			j--;

		}

	}

	private static void display(int[] a) {
		for (int a1 : a) {
			System.out.print(a1 + " ");
		}

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();

		int[] a = new int[n];
		for (int i = 0; i < a.length; i++) {
			a[i] = s1.nextInt();
		}

		reverse(a);
		display(a);

	}

}

20 : rotate and array

/*
 input  n=4
1
2
3
4
k=2

 output  3 4 1 2
 */

public class RotateAnArray {

	private static void reverseAnArray(int[] a,int i, int j) {

	

		while (i < j) {
			int temp = a[i];
			a[i] = a[j];
			a[j] = temp;
			i++;
			j--;

		}

	}

	private static void rotateArray(int[] a, int k) {

		k = k % a.length;
		if (k < 0) {
			k = k + a.length;
		}
		reverseAnArray(a, 0, a.length - k - 1);
		reverseAnArray(a, a.length - k, a.length - 1);
		reverseAnArray(a, 0, a.length - 1);

	}

	private static void display(int[] a) {
		for (int a1 : a) {
			System.out.print(a1 + " ");
		}

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] a = new int[n];
		for (int i = 0; i < a.length; i++) {
			a[i] = s1.nextInt();
		}

		int k = s1.nextInt();

		rotateArray(a, k);
		display(a);

	}

}

21 ) inverse of an array

/*
 * input  5
4
0
2
3
1

 * output 1 4 2 3 0 
 */
public class InverseOfAnArray {
	private static int[] inverseOfAnArray(int[] a) {

		int[] inv = new int[a.length];
		for (int i = 0; i < a.length; i++) {
			int temp = a[i];
			inv[temp] = i;
		}
		return inv;
	}

	private static void display(int[] a) {
		for (int a1 : a) {
			System.out.print(a1 + " ");
		}

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] a = new int[n];
		for (int i = 0; i < a.length; i++) {
			a[i] = s1.nextInt();
		}
		int[] inverseOfAnArray = inverseOfAnArray(a);
		display(inverseOfAnArray);
	}

}


22----sub array

*
 input : 3
10
20
30
output
10	
10	20	
10	20	30	
20	
20	30	
30	

 */
import java.util.Scanner;

public class SubArray {

	private static void subArray(int[] a) {

		for (int i = 0; i < a.length; i++) {
			for (int j = i; j < a.length; j++) {
				for (int k = i; k <= j; k++) {
					System.out.print(a[k] + "\t");
				}
				System.out.println();
			}
		}

	}


	public static void main(String[] args) {
		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] a = new int[n];
		for (int i = 0; i < a.length; i++) {
			a[i] = s1.nextInt();
		}
		subArray(a);
	

	}

}


23- binary element

import java.util.Scanner;
/*
 input 3
1
2
3
search element 2
output :-found element at index 1
 */

public class BinarySearch {
	private static void binarySearch(int[] a, int search) {

		int low = 0;
		int high = a.length - 1;

		while (low <= high) {
			int mid = (low + high) / 2;
			if (a[mid] > search) {
				high = mid - 1;
			} else if (a[mid] < search) {
				low = mid + 1;
			} else {
				System.out.println("found element at index " + mid);
				break;

			}

			System.out.println("value not found");
		}

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] a = new int[n];
		for (int i = 0; i < a.length; i++) {
			a[i] = s1.nextInt();
		}

		int search = s1.nextInt();

		binarySearch(a, search);

	}

}

24---  find ceil floor

import java.util.Scanner;
/*
 input  5
11
22
33
44
55
element to search 34

 output  ceil is 44 and floor is 33
 */
public class CeilFloor {

	private static void ceilFloor(int[] a, int search) {

		int low = 0;
		int high = a.length - 1;
		int ceil = 0;
		int floor = 0;
		while (low <= high) {
			int mid = (low + high) / 2;

			if (a[mid] > search) {
				high = mid - 1;
				ceil = a[mid];

			} else if (a[mid] < search) {
				low = mid + 1;
				floor = a[mid];
			} else {
				ceil = a[mid];
				floor = a[mid];
				break;
			}
		}
		System.out.println("ceil is " + ceil + " and floor is " + floor);
	}

	public static void main(String[] args) {
		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] a = new int[n];
		for (int i = 0; i < a.length; i++) {
			a[i] = s1.nextInt();
		}

		int search = s1.nextInt();
		ceilFloor(a, search);

	}

}

25) print 2d array

/*
 input
 row :- 3
column :-3
element
11
12
13
22
23
24
33
34
35

 output
 11	12	13	
22	23	24	
33	34	35	
 
 */
public class TwoDArray {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int r = s1.nextInt();
		int c = s1.nextInt();
		int[][] arr = new int[r][c];

		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				arr[i][j] = s1.nextInt();
			}
		}

		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				System.out.print(arr[i][j] + "\t");
			}
			System.out.println();
		}

	}

}

26 ) search element in sorted array

/*
 input : matrix 3 3
1
2
3
4
5
6
7
8
9
search element 5

 output : 1 1
 */

public class SearchSortedArray {
	private static void findIndex(int[][] arr, int ele) {

		int i = 0;
		int j = arr[0].length - 1;

		while (i < arr.length && j >= 0) {
			if (arr[i][j] == ele) {
				System.out.println(i + " " + j);
				return;
			} else if (ele < arr[i][j]) {
				j--;
			} else {
				i++;
			}
		}

	}

	public static void main(String[] args) {
		Scanner s1 = new Scanner(System.in);
		int r = s1.nextInt();
		int c = s1.nextInt();
		int[][] arr = new int[r][c];

		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[0].length; j++) {
				arr[i][j] = s1.nextInt();
			}
		}

		int ele = s1.nextInt();

		findIndex(arr, ele);

	}

}

27 :)-----spiral display

/*
 input
 matrix 3,3

1
2
3
4
5
6
7
8
9

 output
 1
4
7
8
9
6
3
2
5
 */
public class SpiralDisplay {

	public static void main(String[] args) {
		Scanner s1 = new Scanner(System.in);
		int r = s1.nextInt();
		int c = s1.nextInt();
		int[][] arr = new int[r][c];

		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[0].length; j++) {
				arr[i][j] = s1.nextInt();
			}
		}

		int minr = 0;
		int minc = 0;
		int maxr = arr.length - 1;
		int maxc = arr[0].length - 1;
		int arrl = r * c;
		int count = 0;

		while (count < arrl) {
			for (int j = minc, i = minr; i <= maxr && count < arrl; i++) {
				System.out.println(arr[i][j]);
				count++;
			}
			minc++;
			for (int j = minc, i = maxr; j <= maxc && count < arrl; j++) {
				System.out.println(arr[i][j]);
				count++;
			}
			maxr--;
			for (int j = maxc, i = maxr; i >= minr && count < arrl; i--) {
				System.out.println(arr[i][j]);
				count++;
			}
			maxc--;
			for (int j = maxc, i = minr; j >= minc && count < arrl; j--) {
				System.out.println(arr[i][j]);
				count++;
			}
			minr++;
		}

	}

}


28  rotate by 90 

/*
 input  matrix 3 3
1
2
3
4
5
6
7
8
9


 output
 7 4 1 
8 5 2 
9 6 3 
 */
public class RotateBy90 {

	public static void display(int[][] arr) {
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[0].length; j++) {
				System.out.print(arr[i][j] + " ");
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		Scanner s1 = new Scanner(System.in);
		int r = s1.nextInt();
		int c = s1.nextInt();
		int[][] arr = new int[r][c];

		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[0].length; j++) {
				arr[i][j] = s1.nextInt();
			}
		}

		for (int i = 0; i < arr.length; i++) {
			for (int j = i; j < arr[0].length; j++) {
				int temp = arr[i][j];
				arr[i][j] = arr[j][i];
				arr[j][i] = temp;

			}
		}
		for (int i = 0; i < arr.length; i++) {
			int li = 0;
			int ri = arr[i].length - 1;
			while (li < ri) {

				int temp = arr[i][li];
				arr[i][li] = arr[i][ri];
				arr[i][ri] = temp;
				li++;
				ri--;

			}
		}
		display(arr);
	}

}

29 ) print all pailandrome

import java.util.Scanner;
/*
 * input  : abac
 * output
 * a
aba
b
a
c
 */
public class printAllPalindromeSubstring {

	private static void solution(String str) {

		for (int i = 0; i < str.length(); i++) {
			for (int j = i + 1; j <= str.length(); j++) {
				String ss = str.substring(i, j);
				if (isPalindrome(ss) == true) {
					System.out.println(ss);
				}
			}
		}

	}

	private static boolean isPalindrome(String ss) {

		int i = 0;
		int j = ss.length() - 1;
		while (i <= j) {
			char ch1 = ss.charAt(i);
			char ch2 = ss.charAt(j);
			if (ch1 != ch2) {
				return false;
			} else {
				i++;
				j--;
			}
		}
		return true;
	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		String str = s1.next();
		solution(str);

	}

}

30 string compressed

import java.util.Scanner;
/*
 * input aabbcccdee

 * output 
 * abcde

 */
public class StringCompression {

	private static String compression1(String s) {

		String str = s.charAt(0) + "";
		for (int i = 1; i < s.length(); i++) {
			char cur = s.charAt(i);
			char prev = s.charAt(i - 1);
			if (cur != prev) {
				str += cur;
			}
		}
		return str;
	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);

		String s = s1.nextLine();

		System.out.println(compression1(s));

		

	}

}

31) remove prime array list

/*
 input 5
11
12
13
14
15

 output
 [12, 14, 15]
 
 */
public class RemovePrimeArrayList {
	private static void removePrime(ArrayList<Integer> al) {

		for (int i = al.size() - 1; i >= 0; i--) {
			int val = al.get(i);
			if (isPrime(val) == true) {
				al.remove(i);
			}
		}

	}

	private static boolean isPrime(int val) {

		for (int i = 2; i * i <= val; i++) {
			if (val % i == 0) {
				return false;
			}
		}
		return true;
	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		ArrayList<Integer> al = new ArrayList<Integer>();

		for (int i = 0; i < n; i++) {
			al.add(s1.nextInt());
		}

		removePrime(al);
		System.out.println(al);

	}

}

recursion 

32  print decreasing
import java.util.Scanner;
/*
 * input : 5
 * output
5
4
3
2
1
 */
public class PrintDecreasing {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		printDecreasing(n);

	}

	private static void printDecreasing(int n) {

		if (n == 0) {
			return;
		}
		System.out.println(n);
		printDecreasing(n - 1);

	}

}

33) print increasing

import java.util.Scanner;
/*
 input 5
 output 
1
2
3
4
5
 */
public class PrintIncreasing {

	private static void printIncreasing(int n) {
		
		if(n==0)
		{
			return;
		}
		printIncreasing(n-1);
		System.out.println(n);
		
	}
	public static void main(String[] args) {
	Scanner s1 = new Scanner(System.in);
	int n=s1.nextInt();
	printIncreasing(n);

	}


}

34 :) print decreasing and increasing
import java.util.Scanner;
/*
 input 2
 output 
 2
1
1
2
 */

public class PrintDecreasingIncreasing {
	private static void printDI(int n) {
		
		if(n==0)
		{
			return;
		}
		System.out.println(n);
		printDI(n-1);
		System.out.println(n);
		
	}

	public static void main(String[] args) {
		
		Scanner s1 = new Scanner(System.in);
		int n=s1.nextInt();
		
		printDI(n);
	}


}

35) factorial 

import java.util.Scanner;
/*
 input 5
 output 120
 */
public class Factorial {
	private static int fact(int n) {

		if (n == 1) {
			return 1;
		}
		int n1 = fact(n - 1);
		int result = n * n1;
		return result;

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int result = fact(n);
		System.out.println(result);

	}

}

36) display array increasing order

import java.util.Scanner;
/*
  Input : no of element 3 : 1,2 ,3
  output
  1
  2
  3
  
 */
public class DisplayArray {
	private static void printArray(int[] arr, int i) {

		if (i == arr.length) {
			return;
		}
		System.out.println(arr[i]);
		printArray(arr, i + 1);

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = s1.nextInt();
		}

		printArray(arr, 0);

	}

}

37) display array decreasing order
import java.util.Scanner;
/*
 input no of element 3- 1,2,3
 output
 1
 2
 3
 */
public class DisplayArrayReverse {
	private static void printArray(int[] arr, int i) {

		if (arr.length == i) {
			return;
		}
		printArray(arr, i + 1);
		System.out.println(arr[i]);

	}

	public static void main(String[] args) {
		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = s1.nextInt();
		}

		printArray(arr, 0);

	}

}

38 max of array
import java.util.Scanner;
/*
 * input 5
11
22
33
21
12

output 33
 */
public class MaxInArray {
	private static int maxOfArray(int[] arr, int i) {

		if(i==arr.length-1)
		{
			return arr[i];
		}
		int misa = maxOfArray(arr, i + 1);
		if (misa > arr[i]) {
			return misa;
		} else {
			return arr[i];
		}

	}

	public static void main(String[] args) {
		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = s1.nextInt();
		}
		int maxOfArray = maxOfArray(arr, 0);
		System.out.println(maxOfArray);

	}

}

39 :) first index of array
 * input 5
1
2
3
2
3
element to search 2
output 1
 */
public class FirstIndex {
	private static int firstIndex(int[] arr, int i, int x) {

		if (i == arr.length) {
			return -1;
		}
		if (arr[i] == x) {
			return i;
		} else {
			int fiisa = firstIndex(arr, i + 1, x);
			return fiisa;
		}

	}

	public static void main(String[] args) {
		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = s1.nextInt();
		}
		int x = s1.nextInt();
		int firstIndex = firstIndex(arr, 0, x);
		System.out.println(firstIndex);

	}

}

40 :) get subsequence using arraylist

import java.util.ArrayList;
import java.util.Scanner;
/*
 *input abc
 *output [, a, b, ab, c, ac, bc, abc]
 */
public class GetSubsequence {
	@SuppressWarnings("unchecked")
	private static ArrayList<String> getSubsequence(String str) {

		if (str.length() == 0) {
			ArrayList<String> al = new ArrayList<>();
			al.add("");
			return al;
		}
		char ch = str.charAt(0);
		String sub = str.substring(1);
		ArrayList<String> subsequence = getSubsequence(sub);

		ArrayList<String> empty = new ArrayList<String>();

		for (String str1 : subsequence) {
			empty.add("" + str1);

			empty.add(ch + str1);
		}
		return empty;

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		String str = s1.next();

		ArrayList<String> subsequence = getSubsequence(str);
		System.out.println(subsequence);

	}

}

41 print subsequence

import java.util.Scanner;
/*
 * input abc
 * output
 * abc
ab
ac
a
bc
b
c
 */
public class PrintSubsequence {
	private static void printSubsequence(String ques, String ans) {

		if (ques.length() == 0) {
			System.out.println(ans);
			return;
		}
		char ch = ques.charAt(0);
		String sb = ques.substring(1);
		printSubsequence(sb, ans + ch);
		printSubsequence(sb, ans + "");

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		String str = s1.next();
		printSubsequence(str, "");

	}

}


42 print permutation





import java.util.Scanner;
/*
 * input abc
output abc acb bac bca cab cba 
 */
public class PrintPermutation {

	private static void printPermutation(String ques, String ans) {

		if (ques.length() == 0) {
			System.out.print(ans +" ");
			return;
		}
		for (int i = 0; i < ques.length(); i++) {
			char ch = ques.charAt(i);
			String lques = ques.substring(0, i);
			String rques = ques.substring(i+1);
			 String roq = lques + rques;
			printPermutation(roq, ans + ch);
		}

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		String str = s1.next();
		printPermutation(str, "");

	}

}

43:) stack

public class NormalStack {

	public static class CustomStack {

		int[] data;
		int tos;

		public CustomStack(int n) {
			data = new int[n];
			tos = -1;

		}

		int size() {

			return tos + 1;

		}

		void display() {

			for (int i = tos; i >= 0; i--) {
				System.out.print(data[i] +" ");
			}
			  System.out.println();
		}

		void push(int val) {

			if (tos == data.length - 1) {
				System.out.println("stack overflow");
			} else {
				tos++;
				data[tos] = val;
			}

		}

		int top() {

			if(tos==-1)
			{
				System.out.println("stack underflow");
				return -1;
			}
			else
			{
				int val=data[tos];
				return val;
				
			}
		}

		int pop() {
			if(tos==-1)
			{
				System.out.println("stack underflow");
				return -1;
			}
			else
			{
				int val=data[tos];
				tos--;
				return val;
			}
		}

	}

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();

		CustomStack st = new CustomStack(n);

		String str = s1.nextLine();

		while (str.equals("quit") == false) {
			if (str.startsWith("push")) {
				int val = Integer.parseInt(str.split(" ")[1]);
				st.push(val);
			} else if (str.startsWith("pop")) {
				int val = st.pop();
				if (val != -1) {
					System.out.println(val);
				}
			} else if (str.startsWith("top")) {
				int val = st.top();
				if (val != -1) {
					System.out.println(val);
				}
			} else if (str.startsWith("size")) {
				System.out.println(st.size());
			} else if (str.startsWith("display")) {
				st.display();
			}
			str = s1.nextLine();
		}

	}

}


44) queue

 */
public class NormalQueue {

	public static class CustomQueue {
		int[] data;
		int front;
		int size;

		public CustomQueue(int cap) {
			data = new int[cap];
			front = 0;
			size = 0;
		}

		int size() {
			return size;
		}

		void display() {
			for (int i = 0; i < size; i++) {
				int idx = (front + i) % data.length;
				System.out.print(data[idx] + " ");
			}
			System.out.println();
		}

		void add(int val) {
			if (size == data.length) {
				System.out.println("queue overflow");
			} else {
				int rear = (front + size) % data.length;
				data[rear] = val;
				size++;
			}
		}

		int remove() {
			if (size == 0) {
				System.out.println("queue underflow");
				return -1;
			} else {
				int val = data[front];
				size--;
				front = (front + 1) % data.length;
				return val;
			}
		}

		int peek() {
			if (size == 0) {
				System.out.println("queue underflow");
				return -1;
			} else {
				int val = data[front];
				return val;
			}
		}
	}













