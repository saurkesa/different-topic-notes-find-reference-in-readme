Please find the consolidated list:

 

1. What is stream() what are the advantages of stream?

2. How is it different from collections?

3. What are intermediate and terminal operations in stream?

4. Is stream mutable or immutable?

5. Lazy operations w.r.t stream

6. Parallel stream - internal working, is it thread safe

7. What is Executor service and why do we need that? Advantages

8. Future objects in relation to multi threading

9. What is ConcurrentHashMap and its internal working?

10. Difference between @RequestMapping and @GetMapping. How are they different? Can we write @RequestMapping

instead of @GetMapping.

11. How do you handle concurrency in your restful services? If you are creating or updating, and users complaining that

they do not find the orders they created? What would be the primary reason as a developer you try to find? Any

feature that spring provides to handle concurrency.

12. How do you handle transactions? Any other way apart from @Transactional

13. Explain Spring MVC lifecycle

14. Lets say I have a method that is returning some custom object and I want to create a bean out of it. How would

you do it? Method I want to convert or return as a bean. Lets say a method getName() which is returning a string

name, instead of string I want to return a bean.

15. @Bean annotation

16. I want to run a method before executing my endpoint method. How would you do that?

17. Filter

18. Have you worked on Partitions?

19. When can I use the "having” clause in oracle?

20. Lets say we have an Employee table with name and location. Now I query employees grouping by location. Now I

want to put a condition where the count is greater than 10. Where do you put this condition?

21. What is the difference between Primary and Unique constraints?

 

Kafka
What is the default Kafka retention period?
How do you read Kafka messages again after they’ve been read once?
What configurations are needed to use Kafka?
How have you used Kafka in your project?
Kafka architecture.

Java Concepts
Difference between Abstract Class and Interface.
What is a Functional Interface?Can it contain default methods?
What are its predefined types?
Difference between Runnable and Callable.
Internal working of HashMap.Default capacity and load factor.
Types of Java collections:HashMap, ConcurrentHashMap, SynchronizedHashMap, HashSet, and lists.
Exception handling in Java.
Multithreading concepts:Executor service.
Volatile, atomic variables, locks, and semaphores.
Waiting for threads to complete in Executor Framework.
Singleton Design Pattern.
Solid principles in OOP.

Java Coding
Sort a list of Employees by name and then by salary using:Java Streams.
Comparators.
Group Employees by departments using:Java Streams.
SQL query.
Write a Java program for:Returning the top 2 students in each subject (marks are subject-wise).
Finding the second largest number in a list efficiently.
Filtering unique elements from a list using Java 8.
Finding the first non-repetitive character in a string.
Merging two sorted arrays and calculating time complexity.
Generating random numbers, sorting them, and finding their index.
Removing duplicates from a list using Stream API.
Converting a list of objects (e.g., Person with name and age) to a map.
Implementing multithreading with multiple lists.
Calculating water accumulated between buildings of different heights.
Write hashCode and equals methods for a custom Employee class.
Explanation and behavior of:String s = "abc";
String p = "abc";
String r = new String("abc");
s == p, s == r, s.equals(p), s.equals(r.


Spring Framework
Spring annotations and their uses.
What is the Dispatcher Servlet in Spring?
Starting a Spring Boot application:Use of @Configuration, component scan, property file precedence, Spring profiles.
Adding Spring Security to a project.
Benefits of JPA over JDBC.
Handling XML-based configuration in Spring Boot.
Monitoring application health in Spring.
Custom exceptions in Spring Boot.
Transaction management in Spring.
Difference between Spring and Spring Boot.
Dependency Injection and Inversion of Control.
Difference between Controller and RestController.

SQL
Queries:Get the 3rd highest salary.
Count employees per department and location.
Get the top 5 highest-paid employees per department.
Use joins to fetch employee and department names where salary is the highest in a department.
Group employees by age or other attributes.
Write a query to pull cities with more than 10,000 employees.
Difference between:Inner and Outer joins.
Function and Stored Procedure.
Importance and criteria for Indexing and Partitioning.
Rules for using the GROUP BY clause.
SQL Triggers.

AWS
Pushing code to AWS.
AWS services used in the project:EC2 and its role in deployment.
S3 usage, data archiving, and retention policies.
Lambda expressions in AWS.
Handling errors during deployment on Docker and Kubernetes.
Logging in Kubernetes.

Problem-Solving Scenarios
Optimizing SQL queries for performance:Analyze and identify bottlenecks.
Steps for optimization.
Implement multithreading to process multiple lists simultaneously.
Efficient searching in large datasets:Deciding the right data structure based on requirements.
Maintain a recently searched item list in a collection.
Buy and sell stocks for maximum profit in a week.

Miscellaneous
Design patterns:Factory Design Pattern.
Singleton Design Pattern.
Maven and Build Tools:Transitive dependencies.
Resolving dependency conflicts.
Use of plugins in Maven.
Debugging scenarios:Resolving "no bean found" errors.
How web.xml works in a Spring application.
How to analyze and improve query performance in a database.