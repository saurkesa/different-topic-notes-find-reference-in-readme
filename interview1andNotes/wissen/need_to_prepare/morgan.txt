1:-- longest common subsequence

public class Test {

	public static void main(String[] args) {

		Scanner s1 = new Scanner(System.in);
		int n = s1.nextInt();

		int[] arr = new int[n];

		for (int i = 0; i < arr.length; i++) {
			arr[i] = s1.nextInt();
		}
		
		HashMap<Integer, Boolean> hm = new HashMap<>();
		
		for(int val :arr) {
			hm.put(val,true);
		}
		
		for(int val :arr) {
			if(hm.containsKey(val-1)) {
				hm.put(val,false);
			}
		}
		
		int ml=0;
		int msp=0;
		
		
		for(int val:arr) {
			if(hm.get(val)==true) {
				int tl=1;
				int tsp=val;
				while(hm.containsKey(tsp+tl)) {
					tl++;
				}
				if(tl>ml) {
					ml=tl;
					msp=tsp;
				}
			}
		}

		for(int i=0;i<ml;i++) {
			System.out.println(msp+i);
		}
	}
}
===============================================================

2:---executorservice

class RunnableTask implements Runnable {

	int taskId;

	public RunnableTask(int taskId) {

		this.taskId = taskId;
	}

	public void run() {
		System.out.println(" task id " + taskId + Thread.currentThread().getName());

		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}

public class Test {

	public static void main(String[] args) {

		ExecutorService executorService = Executors.newFixedThreadPool(3);

		for (int i = 0; i < 5; i++) {
			executorService.submit(new RunnableTask(i));
		}
		  executorService.shutdown();
	}
}
============================================================================

3------------------------------
Employee Salary 
- Employee Id
- Employee name
- Month
- Year
- Tax
- Salary
- PF
 
1. Question : Write Query for below :
Find avg of tax, maximum salary and sum of PF

SELECT 
    AVG(Tax) AS Average_Tax, 
    MAX(Salary) AS Maximum_Salary, 
    SUM(PF) AS Total_PF
FROM 
    employee_salary;
  
  
  ================ using java 8 
  
  import java.util.List;
import java.util.OptionalDouble;

public class EmployeeSalaryStatistics {
    public static void main(String[] args) {
        // Sample list of employees
        List<Employee> employees = List.of(
                new Employee(1, "Alice", 1, 2025, 1500, 50000, 2000),
                new Employee(2, "Bob", 1, 2025, 1200, 45000, 1800),
                new Employee(3, "Charlie", 1, 2025, 1800, 60000, 2200),
                new Employee(4, "David", 1, 2025, 1400, 52000, 2100)
        );

        // Calculate average tax
        OptionalDouble avgTax = employees.stream()
                .mapToDouble(Employee::getTax)
                .average();

        // Calculate maximum salary
        OptionalDouble maxSalary = employees.stream()
                .mapToDouble(Employee::getSalary)
                .max();

        // Calculate total PF sum
        double totalPF = employees.stream()
                .mapToDouble(Employee::getPf)
                .sum();

        // Output results
        System.out.println("Average Tax: " + (avgTax.isPresent() ? avgTax.getAsDouble() : "N/A"));
        System.out.println("Maximum Salary: " + (maxSalary.isPresent() ? maxSalary.getAsDouble() : "N/A"));
        System.out.println("Total PF: " + totalPF);
    }
}

=============================================
4--------------------------
. Question : You have 100 files, Process 5 file at a time using thread and collect all the process result at the end of processing all files.

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

class FileProcessor implements Callable<String> {
    private final int fileId;

    // Constructor to initialize the file ID
    public FileProcessor(int fileId) {
        this.fileId = fileId;
    }

    @Override
    public String call() throws Exception {
        // Simulate file processing (can be replaced with actual logic)
        System.out.println("Processing file " + fileId);
        Thread.sleep(1000);  // Simulating some file processing time
        return "Result of file " + fileId;
    }
}

public class FileProcessingManager {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int totalFiles = 100;
        int filesPerBatch = 5;

        // Create a fixed thread pool with 5 threads to process files
        ExecutorService executor = Executors.newFixedThreadPool(filesPerBatch);
        List<Future<String>> futures = new ArrayList<>();

        // Process the files in batches of 5
        for (int i = 1; i <= totalFiles; i++) {
            FileProcessor task = new FileProcessor(i);
            Future<String> future = executor.submit(task);
            futures.add(future);
            
            // If we've processed 5 files, wait for their results
            if (i % filesPerBatch == 0 || i == totalFiles) {
                // Collect results of the previous batch
                for (Future<String> f : futures) {
                    System.out.println(f.get());  // Get the result from each file processing
                }
                futures.clear(); // Clear the list for the next batch
            }
        }

        // Shutdown the executor service
        executor.shutdown();
    }
}


=======================================================================

5--------- . Question : I have a jar in our spring project. How you will provide DB connection information to your jar.

Summary of Approaches:
Use application.properties or application.yml for the most common and standard approach in Spring Boot.
Use Command-line arguments to override database configuration during runtime.
Use Environment Variables for externalized configuration, especially for cloud or containerized environments.
Manually configure DataSource in a @Configuration class for more complex scenarios.
Use Spring Profiles to have different configurations for different environments.

=============================================================================================
6------------------------Diffrence between Request and Protype

Feature	Request Scope	Prototype Scope
Creation	
One instance per HTTP request.	
One instance per request (e.g., method call, injection).
Lifecycle	
Tied to the HTTP request lifecycle.
Tied to the object request lifecycle (created when requested, destroyed when no longer referenced).
Use Case	
Used for request-specific data in web apps.
Used when a new instance is required for every invocation.
Common Use	
Web applications (per HTTP request).	
Services or operations requiring a fresh instance.

==================================================

7---------------- Can you tell me how many instances of Service B will be created.
 If services A is singleton Bean and Service B is prototype. 1. Service A is called 3 times and it calls 
Service B by using Application Context in its 3 methods. 2. If Sevice A puts Autowired annotation on Service B reference.

 solution 3 instances of Service B will be created (since Service A calls Service B using ApplicationContext
 
 ======================================================================================
 8:--------------------------
 
 . ⁠if hashcode returns the same number always what will be the time complexity to save n elements?
 
 If hashCode() returns the same number always, the HashMap degrades to a single linked list, and both insertion and search operations will take O(n)
 time in the worst case.The total time complexity for inserting n elements will be O(n^2).
 
 ========================================================================================
 9:- If you have to return result from ResultSet out of LinkedList and ArrayList which one you will prefer and Why?
 
 In the context of returning results from a ResultSet, ArrayList is typically preferred due to:

Faster access and iteration for most use cases.
Lower memory overhead, especially when the list is not being modified frequently.
Better performance for random access operations, which are common when processing database results.
LinkedList may be considered if you need frequent insertions and deletions in the middle of the list, but this is rarely the 
case when dealing with ResultSet data, which tends to be read and processed sequentially. Therefore, ArrayList is generally the better choice.

================================================================================================
10 :-⁠If you have to return 1 million records as a result from a ResultSet how would you do that and which data structure would you use?

Approach:
Use Pagination or Streaming: Instead of loading all 1 million records into memory at once, use pagination or streaming to avoid memory overflow.

Pagination: Fetch records in smaller chunks (e.g., 10,000 at a time).
Streaming: Process records one at a time or in smaller batches as they are retrieved from the database.
Use Efficient Data Structure:

ArrayList: Ideal for storing large sets of data when sequential access is needed, as it offers fast random access (O(1)) and minimal memory overhead.
Avoid LinkedList: Due to its higher memory overhead and slower random access (O(n)), it's generally not preferred for large datasets.
Recommended Approach:
Pagination: Execute queries with limits and offsets, retrieve data in batches, and add results to an ArrayList.
Memory Management: Consider storing results temporarily and releasing memory between batches.

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ResultSetPagination {

    public List<String> getResults(Connection connection, int offset, int limit) throws SQLException {
        String query = "SELECT name FROM employees LIMIT ? OFFSET ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, limit);
            stmt.setInt(2, offset);
            ResultSet resultSet = stmt.executeQuery();
            
            List<String> resultList = new ArrayList<>();
            while (resultSet.next()) {
                resultList.add(resultSet.getString("name"));
            }
            return resultList;
        }
    }

    public void processResults(Connection connection) throws SQLException {
        int batchSize = 10000;
        int offset = 0;
        List<String> results;

        // Fetch data in batches of 10,000 records
        while (!(results = getResults(connection, offset, batchSize)).isEmpty()) {
            // Process results here
            System.out.println("Processed batch starting at offset " + offset);
            offset += batchSize;
        }
    }
}

Conclusion:
Data Structure: Use ArrayList due to its fast access and low overhead for storing large data.
Strategy: Use pagination to avoid memory overload when handling large datasets like 1 million records.

========================================================================================================

11----------- . What happens when the size of the HashMap or ArrayList is exceeded.

When a HashMap or ArrayList exceeds its capacity, both resize their internal structures, but the exact increase in size differs between the two:

1. ArrayList:
Resize Strategy: When the current capacity is exceeded, the internal array is doubled in size.
For example, if the current capacity is 10, the new capacity after resizing would be 20.
Behavior: This doubling strategy allows the ArrayList to handle large numbers of elements efficiently, though resizing happens less frequently as the list grows.
2. HashMap:
Resize Strategy: When the number of entries exceeds the threshold defined by the load factor (default 0.75), the internal array is doubled in size.
For example, if the initial capacity is 16, after resizing, the new capacity would be 32.
Additionally, rehashing occurs, which means the existing entries are redistributed across the new array based on their hash values.
Summary:
ArrayList: The size is typically doubled.
HashMap: The capacity is usually doubled, and rehashing occurs for the new array.

==============================================================================================

12:---1. Write a program for input: Hi how are you.
Output: iH woh era uoy.

package com;

public class Test {

	public static void main(String[] args) {

		String input = "Hi how are you";

		StringBuilder sb = new StringBuilder();

		String[] words = input.split(" ");

		for (String word : words) {

			char[] ch = word.toCharArray();

			int left = 0;
			int right = ch.length - 1;
			while (left < right) {
				char temp = ch[left];
				ch[left] = ch[right];
				ch[right] = temp;
				left++;
				right--;
			}

			sb.append(new String(ch)).append(" ");
		}

		System.out.println(sb.toString().trim());

	}
}

===========================================================

13:-----



