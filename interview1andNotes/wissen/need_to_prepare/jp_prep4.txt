1:--------
how do you group by department in a person object ID name department ID and find second A salary?

class Person {
	int id;
	String name;
	int departmentId;
	double salary;

	public Person(int id, String name, int departmentId, double salary) {
		this.id = id;
		this.name = name;
		this.departmentId = departmentId;
		this.salary = salary;
	}

	public double getSalary() {
		return salary;
	}

	public int getDepartmentId() {
		return departmentId;
	}

	@Override
	public String toString() {
		return "Person [id=" + id + ", name=" + name + ", departmentId=" + departmentId + ", salary=" + salary + "]";
	}

}

public class Test {
	public static void main(String[] args) {

		List<Person> list = Arrays.asList(new Person(1, "alice", 1, 20000), new Person(2, "bob", 2, 30000),
				new Person(3, "charlie", 2, 40000), new Person(4, "david", 1, 50000), new Person(5, "ena", 2, 20000),
				new Person(6, "frank", 1, 60000)

		);

		Map<Integer, List<Person>> groupByDepartment = list.stream()
				.collect(Collectors.groupingBy(Person::getDepartmentId));

		groupByDepartment.forEach((deptId, listPerson) -> {

			Person person = listPerson.stream().sorted((s1, s2) -> Double.compare(s2.getSalary(), s1.getSalary()))
					.skip(1).findFirst().get();

			System.out.println("departmentId " + deptId + " second max salary " + person.getSalary());

		});

	}
}

============

SELECT department_id, MAX(salary) AS second_highest_salary
FROM employees
WHERE salary < (
    SELECT MAX(salary)
    FROM employees
    WHERE department_id = employees.department_id
)
GROUP BY department_id;


=============================================================

2:----    maximum occurring number in an array {1,2,3,2,3,4,5,2,6,2}

int[] arr= {1,2,3,2,3,4,5,2,6,2};
		
		Map<Integer, Long> collect = Arrays.stream(arr).boxed().collect(Collectors.groupingBy(x->x,Collectors.counting()));
		
		Optional<Integer> map = collect.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey);
		
		System.out.println(map.get());
		
======================================

